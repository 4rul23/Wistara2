// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int       @id @default(autoincrement())
  email               String    @unique
  password            String
  name                String
  username            String?   @unique
  fullName            String?
  avatar              String?
  bio                 String?
  role                String    @default("user")
  joinDate            DateTime  @default(now())

  // Lokasi dan preferensi
  location            String?
  city                String?
  age                 Int?
  coordinates         Json?     // Akan menyimpan {latitude, longitude}

  visitedPlaces       String[]  @default([])
  priceRange          String?   // Nilai standard: "budget", "midRange", "luxury"

  interestTags        String[]  @default([])
  preferredCategories String[]  @default([])
  minRating           Float?    @default(0)

  needsProfileUpdate  Boolean   @default(true)

  comments            Comment[]

  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

model Session {
  sid       String   @id
  sess      Json     @map("sess")
  expire    DateTime @map("expire")

  @@map("sessions")
  @@index([expire], name: "IDX_sessions_expire")
}

// Model untuk komentar
model Comment {
  id                  Int        @id @default(autoincrement())
  text                String     @db.Text
  rating              Float

  userId              Int
  user                User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  destinationId       String
  destination         Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  destinationName     String?

  date                DateTime   @default(now())
  createdAt           DateTime   @default(now()) @map("created_at")
  updatedAt           DateTime   @updatedAt @map("updated_at")

  @@map("comments")
  @@index([userId])
  @@index([destinationId])
}

model Destination {
  id                  String    @id
  name                String
  description         String    @db.Text
  location            String
  region              String
  category            String
  image               String
  likes               Int       @default(0)
  rating              Float     @default(0)
  bestTimeToVisit     String?
  entranceFee         String?
  activities          String[]
  coordinates         Json?     // {latitude, longitude}
  difficulty          String?
  culturalSignificance String?   @db.Text
  transportation      String[]
  localCuisine        String[]  @default([])

  accommodations      Json?     // Format: {budget: string, midRange: string, luxury}
  nearbyAttractions   String[]

  // Relasi dengan komentar
  comments            Comment[]

  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  @@map("destinations")
}
